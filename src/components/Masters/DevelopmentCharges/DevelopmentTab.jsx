import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  Grid, 
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Snackbar,
  Alert,
  CircularProgress,
  InputAdornment
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import InfoIcon from '@mui/icons-material/Info';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import axiosInstance from '../../../axiosInstance';

const initialFormData = {
  developmentRateId: "",
  amount: ""
};

const DevelopmentRateTab = () => {
  // State variables
  const [formData, setFormData] = useState(initialFormData);
  const [developmentRates, setDevelopmentRates] = useState([]);
  const [filteredRates, setFilteredRates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedRate, setSelectedRate] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  useEffect(() => {
    fetchDevelopmentRates();
  }, []);

  // Handle search filtering
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredRates(developmentRates);
    } else {
      const lowercasedFilter = searchTerm.toLowerCase();
      const filtered = developmentRates.filter(item => {
        return (
          (item.amount && item.amount.toString().includes(lowercasedFilter)) ||
          (item.createdAt && formatDate(item.createdAt).toLowerCase().includes(lowercasedFilter))
        );
      });
      setFilteredRates(filtered);
    }
  }, [searchTerm, developmentRates]);

  // Fetch all development rates
  const fetchDevelopmentRates = async () => {
    setLoading(true);
    try {
      const response = await axiosInstance.get('/realEstate/development-rate-master/getAll');
      
      if (response.data && response.data.status === 200 && Array.isArray(response.data.data)) {
        setDevelopmentRates(response.data.data);
        setFilteredRates(response.data.data);
      } else {
        handleNotification('Failed to fetch development rates. Invalid response format.', 'error');
        console.error('Invalid response format:', response.data);
        setDevelopmentRates([]);
        setFilteredRates([]);
      }
    } catch (error) {
      handleApiError(error, 'Failed to fetch development rates');
      setDevelopmentRates([]);
      setFilteredRates([]);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateForm = () => {
    if (!formData.amount || formData.amount <= 0) {
      handleNotification('Please enter a valid amount greater than 0', 'error');
      return false;
    }
    
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    try {
      if (isEditing) {
        // Update existing development rate
        const response = await axiosInstance.put(`/realEstate/development-rate-master/update?rateId=${formData.developmentRateId}`, {
          developmentRateId: formData.developmentRateId,
          amount: Number(formData.amount)
        });
        
        if (response.data && response.data.status === 200) {
          handleNotification('Development rate updated successfully', 'success');
          fetchDevelopmentRates(); // Refresh the list
          resetForm();
        } else {
          handleNotification(response.data.message || 'Failed to update development rate', 'error');
        }
      } else {
        // Create new development rate
        const response = await axiosInstance.post('/realEstate/development-rate-master/post', {
          developmentRateId: null, // Will be generated by the server
          amount: Number(formData.amount)
        });
        
        if (response.data && response.data.status === 201) {
          handleNotification('Development rate added successfully', 'success');
          fetchDevelopmentRates(); // Refresh the list
          resetForm();
        } else {
          handleNotification(response.data.message || 'Failed to add development rate', 'error');
        }
      }
    } catch (error) {
      handleApiError(error, isEditing ? 'Failed to update development rate' : 'Failed to add development rate');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleEdit = (rate) => {
    setFormData({
      developmentRateId: rate.developmentRateId,
      amount: rate.amount
    });
    
    setIsEditing(true);
  };

  const handleDelete = (rate) => {
    setSelectedRate(rate);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!selectedRate) return;
    
    setIsSubmitting(true);
    try {
      const response = await axiosInstance.delete(`/realEstate/development-rate-master/delete/${selectedRate.developmentRateId}`);
      
      if (response.data && response.data.status === 200) {
        handleNotification('Development rate deleted successfully', 'success');
        fetchDevelopmentRates(); // Refresh the list
      } else {
        handleNotification(response.data.message || 'Failed to delete development rate', 'error');
      }
    } catch (error) {
      handleApiError(error, 'Failed to delete development rate');
    } finally {
      setIsSubmitting(false);
      setDeleteDialogOpen(false);
      setSelectedRate(null);
    }
  };

  const resetForm = () => {
    setFormData(initialFormData);
    setIsEditing(false);
  };

  const handleCancel = () => {
    resetForm();
  };

  // Helper function for consistent API error handling
  const handleApiError = (error, defaultMessage) => {
    console.error(defaultMessage, error);
    
    let errorMessage = defaultMessage;
    
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      if (error.response.data && error.response.data.message) {
        errorMessage = error.response.data.message;
      } else {
        switch (error.response.status) {
          case 400:
            errorMessage = 'Invalid data provided. Please check your input.';
            break;
          case 404:
            errorMessage = 'Resource not found.';
            break;
          case 409:
            errorMessage = 'A development rate with this amount already exists.';
            break;
          case 500:
            errorMessage = 'Server error. Please try again later.';
            break;
          default:
            errorMessage = `Error: ${error.response.status} - ${error.response.statusText}`;
        }
      }
    } else if (error.request) {
      // The request was made but no response was received
      errorMessage = 'No response from server. Please check your connection.';
    } else {
      // Something happened in setting up the request
      errorMessage = 'Request configuration error: ' + error.message;
    }
    
    handleNotification(errorMessage, 'error');
  };

  // Helper function for showing notifications
  const handleNotification = (message, severity = 'success') => {
    setNotification({
      open: true,
      message,
      severity
    });
  };

  const handleCloseNotification = () => {
    setNotification(prev => ({
      ...prev,
      open: false
    }));
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    
    try {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return new Date(dateString).toLocaleDateString(undefined, options);
    } catch (error) {
      console.error('Error formatting date:', error);
      return 'Invalid Date';
    }
  };

  return (
    <Box sx={{ width: '100%' }}>
      {/* Header with title and search */}
      <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' },
        justifyContent: 'space-between', 
        alignItems: { xs: 'flex-start', sm: 'center' },
        mb: 3,
        gap: 2
      }}>
        <Typography variant="h5" component="h1" fontWeight="bold">
          Development Rate Management
        </Typography>
        
        <TextField
          placeholder="Search rates..."
          size="small"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon fontSize="small" />
              </InputAdornment>
            ),
          }}
          sx={{ width: { xs: '100%', sm: 220 } }}
        />
      </Box>
      
      {/* Form Section */}
      <Paper 
        elevation={0} 
        sx={{ 
          p: 3, 
          mb: 4, 
          border: '1px solid #e0e0e0',
          borderRadius: 1
        }}
      >
        <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
          {isEditing ? 'Edit Development Rate' : 'Add New Development Rate'}
        </Typography>
        
        <Box component="form" onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                required
                label="Development Amount"
                name="amount"
                type="number"
                value={formData.amount}
                onChange={handleChange}
                disabled={isSubmitting}
                InputProps={{ 
                  startAdornment: <InputAdornment position="start">₹</InputAdornment>,
                  endAdornment: <InputAdornment position="end">/sqft</InputAdornment>,
                  inputProps: { min: 1 }
                }}
                helperText="Development charges per square foot"
              />
            </Grid>
          </Grid>
          
          <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
            <Button
              type="submit"
              variant="contained"
              disabled={isSubmitting}
              startIcon={isSubmitting ? <CircularProgress size={20} /> : (isEditing ? null : <AddIcon />)}
              sx={{
                bgcolor: '#6B66FF',
                '&:hover': { bgcolor: '#5652e5' }
              }}
            >
              {isSubmitting ? 'Saving...' : (isEditing ? 'Update Rate' : 'Add Rate')}
            </Button>
            
            {isEditing && (
              <Button
                variant="outlined"
                onClick={handleCancel}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
            )}
          </Box>
        </Box>
      </Paper>
      
      {/* Info Card */}
      <Paper 
        elevation={0} 
        sx={{ 
          p: 3, 
          mb: 4, 
          bgcolor: '#f8f9fa',
          border: '1px solid #e0e0e0',
          borderLeft: '4px solid #FFC107',
          borderRadius: 1
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <InfoIcon color="warning" />
          <Typography variant="body2" fontWeight={500}>
            Development charges are applied per square foot for infrastructure and amenities.
            The most recent rate is used for new bookings.
          </Typography>
        </Box>
      </Paper>
      
      {/* Table Section */}
      <TableContainer
        component={Paper}
        elevation={0}
        sx={{
          overflowX: 'auto',
          border: '1px solid #e0e0e0',
          borderRadius: 1
        }}
      >
        <Table>
          <TableHead sx={{ backgroundColor: '#DAE1F3' }}>
            <TableRow>
              <TableCell align="center" sx={{ fontWeight: 600 }}>Rate (₹/sqft)</TableCell>
              {/* <TableCell sx={{ fontWeight: 600 }}>Created Date</TableCell> */}
              <TableCell align="center" sx={{ fontWeight: 600 }}>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={3} align="center" sx={{ py: 3 }}>
                  <CircularProgress size={40} />
                  <Typography variant="body2" sx={{ mt: 2 }}>
                    Loading development rates...
                  </Typography>
                </TableCell>
              </TableRow>
            ) : filteredRates.length === 0 ? (
              <TableRow>
                <TableCell colSpan={3} align="center" sx={{ py: 3 }}>
                  <Typography variant="body1">
                    No development rates found. {searchTerm && "Try adjusting your search criteria."}
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              filteredRates.map((rate) => (
                <TableRow key={rate.developmentRateId}>
                  <TableCell align="center" sx={{ fontWeight: 500 }}>₹{rate.amount}</TableCell>
                  {/* <TableCell sx={{ fontWeight: 500 }}>{formatDate(rate.createdAt)}</TableCell> */}
                  <TableCell align="center">
                    <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center' }}>
                      <IconButton 
                        size="small" 
                        sx={{ color: '#6B66FF' }}
                        onClick={() => handleEdit(rate)}
                        disabled={isSubmitting}
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                      <IconButton 
                        size="small" 
                        color="error"
                        onClick={() => handleDelete(rate)}
                        disabled={isSubmitting}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Box>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
      
      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => !isSubmitting && setDeleteDialogOpen(false)}
      >
        <DialogTitle>
          Confirm Deletion
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete the development rate of ₹{selectedRate?.amount}/sqft? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ px: 3, py: 2 }}>
          <Button 
            onClick={() => setDeleteDialogOpen(false)} 
            variant="outlined"
            disabled={isSubmitting}
          >
            Cancel
          </Button>
          <Button 
            onClick={confirmDelete} 
            variant="contained" 
            color="error"
            disabled={isSubmitting}
            startIcon={isSubmitting && <CircularProgress size={20} color="inherit" />}
          >
            {isSubmitting ? 'Deleting...' : 'Delete'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Notifications */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert 
          onClose={handleCloseNotification} 
          severity={notification.severity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default DevelopmentRateTab;